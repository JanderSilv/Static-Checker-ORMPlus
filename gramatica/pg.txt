G:

G = (V, Σ, P, program)
V = {
  program,declaration-list,declaration,variable-declaration,function-declaration,type-specifier, var-decl-list, var-decl-id, type-specifier, function-declaration, params, param-list, param-type-list, param-id-list, param-id, compound-stmt, local-declarations, statement-list, statement, expression-stmt, selection-stmt, iteration-stmt, return-stmt, break-stmt, expression, var, simple-expression, or-expression, unary-rel-expression, rel-expression, relop, add-expression, addop, term, mulop, unary-expression, factor, constant, number, string, detour, args, arg-list, begin, end, [, ] , ; , ,, Identifier, Integer-Number, float, int, string, void, bool, char, (,), {, } , if, else, while, return, break, |, &, !, =, >=, <, <=, ==, !=, #, +, -, *, /, true, false, Float-number,Constant-String,Character,Function
  }
Σ= {
  begin,end, [, ], ;, ,, Identifier, Integer-Number, float, int, string, void, bool, char,(, ), {, } , if, else, while, return,break, |, &, !, =, >=, <, <=, ==, !=, #, +, -, *, /, true, false, Float-number,Constant-String,Character,Function
}
P = {
  program → begin declaration-list end,
  declaration-list → declaration-list ; declaration,
  declaration-list → declaration 
  declaration → variable-declaration,
  declaration → function-declaration,
  variable-declaration → type-specifier var-decl-list ;,
  variable-declaration → type-specifier [] var-decl-list ;,
  var-decl-list → var-decl-list , var-decl-id ,
  var-decl-list → var-decl-id,
  var-decl-id → Identifier,
  var-decl-id → Identifier[Integer-Number],
  type-specifier → float,
  type-specifier → int,
  type-specifier → string,
  type-specifier → void,
  type-specifier → bool,
  type-specifier → char,
  function-declaration → type-specifier Function(params )statement,
  params → param-list,
  params → ε,
  param-list → param-list ; param-type-list ,
  param-list → param-type-list ,
  param-type-list  → type-specifier  param-id-list ,
  param-id-list → param-id-list , param-id,
  param-id-list → param-id , 
  param-id → Identifier,
  param-id → Identifier[Integer-Number],
  compound-stmt → {local-declarations statement-list },
  local-declarations → local-declarations variable-declaration,
  local-declarations → ε,
  statement-list → statement-list statement ,
  statement-list → ε,
  statement → expression-stmt ,
  statement → compound-stmt,
  statement → selection-stmt,statement → iteration-stmt,
  statement → return-stmt,statement → break-stmt,
  expression-stmt → expression ;,
  expression-stmt → ;,
  selection-stmt → if(expression )statement ,
  selection-stmt → if(expression )statement else statement ,
  iteration-stmt → while(expression)statement,
  return-stmt → return;,
  return-stmt → return expression ;,
  break-stmt → break;,
  expression → var = expression ,
  expression → simple-expression ,
  var → Identifier,
  var → Identifier[Integer-Number],
  simple-expression → simple-expression|or-expression,
  simple-expression → or-expression ,
  or-expression → or-expression &unary-rel-expression ,
  or-expression → unary-rel-expression ,
  unary-rel-expression → !unary-rel-expression ,
  unary-rel-expression → rel-expression ,
  rel-expression → add-expression relop add-expression ,
  rel-expression → add-expression,
  relop → =,
  relop → >,
  relop → >= ,
  relop → <,
  relop → <= ,
  relop → ==,
  relop → !=,
  relop → #,
  add-expression → add-expression addop term ,
  add-expression → term ,
  addop → +,
  addop  → -,
  term → term mulop unary-expression ,
  term → unary-expression ,
  mulop → *,
  mulop → /,
  unary-expression → -unary-expression ,
  unary-expression → factor, 
  factor → (expression ),
  factor → var,factor → detour,factor → constant,
  constant → number ,
  constant → string, constant → true, 
  constant → false, 
  number → Integer-number ,
  number → Float-number , 
  string → Constant-String,
  string → Character ,
  detour → Function ( args ),
  args → arg-list ,
  args → ε,
  arg-list → arg-list , expression ,
  arg-list → factor
  }

<program> ::= begin <declaration-list> end
<declaration-list> ::= <declaration-list> ; <declaration> | <declaration>
<declaration> ::= <variable-declaration> | <function-declaration>
<variable-declaration> ::= <type-specifier> <var-decl-list> ; | <type-specifier> [] <var-decl-list> ;
<var-decl-list> ::= <var-decl-list> , <var-decl-id> | <var-decl-id>
<var-decl-id> ::= Identifier | Identifier [ Integer-Number ]
<type-specifier> ::= float | int | string | void | bool | char
<function-declaration> ::= <type-specifier> Function ( <params> ) <statement>
<params> ::= <param-list> | ε
<param-list> ::= <param-list> ; <param-type-list> | <param-type-list>
<param-type-list> ::= <type-specifier> <param-id-list>
<param-id-list> ::= <param-id-list> , <param-id> | <param-id>
<param-id> ::= Identifier | Identifier[ Integer-Number ]  
<compound-stmt> ::= { <local-declarations> <statement-list> }  
<local-declarations> ::= <local-declarations> <variable-declaration> | ε
<statement-list> ::= <statement-list> <statement> | ε
<statement> ::= <expression-stmt> | <compound-stmt> | <selection-stmt> | <iteration-stmt> | <iteration-stmt> | <return-stmt> | <break-stmt>
<expression-stmt> ::= <expression> ; | ;
<selection-stmt> ::= if( <expression> ) <statement> | if( <expression> ) <statement> else <statement>
<iteration-stmt> ::= while ( <expression> ) <statement>  
<return-stmt> ::= return ; | return <expression> ;
<break-stmt> ::= break ;  
<expression> ::= <var> = <expression> | <simple-expression>
<var> ::= Identifier | Identifier[Integer-Number]
<simple-expression> ::= <simple-expression> | <or-expression> | <or-expression>, 
<or-expression> ::= <or-expression> & <unary-rel-expression> | <unary-rel-expression>
<unary-rel-expression> ::= ! <unary-rel-expression> | <rel-expression>
<rel-expression> ::= <add-expression> <relop> <add-expression> | <add-expression>
<relop> ::= = | > | >= | < | <= | == | != | #
<add-expression> ::= <add-expression> <addop> <term> | <term>
<addop> ::= + | -
<term> ::= <term> <mulop> <unary-expression> | <unary-expression>
<mulop> ::= * | /
<unary-expression> ::= - <unary-expression> | <factor>
<factor> ::= ( <expression> ) | <var> | <detour> | <constant>  
<constant> ::= <number> | <string> | true | false
<number> ::= Integer-number | Float-number
<string> ::= Constant-String | Character
<detour> ::= Function ( <args> )
<args> ::= <arg-list> | ε
<arg-list> ::= <arg-list> , <expression> | <factor>